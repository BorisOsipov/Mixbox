#!/bin/bash

set -e
set -x

SCRIPT_ROOT=$(cd `dirname $0`; pwd)
REPO_ROOT=$(cd "$SCRIPT_ROOT" cd `git rev-parse --show-toplevel`; pwd)

# The only job of this script is to
# run swift code with proper dependencies, including proper version of swift

main() {
    printStatus
    checkDependencies
    build
    execute
}

printStatus() {
    echo "##teamcity[progressMessage '$MIXBOX_CI_BUILD_EXECUTABLE']"
}

checkDependencies() {
    installCommandLineToolsIfNeeded
}

installCommandLineToolsIfNeeded() {
    pkgutil --pkg-info=com.apple.pkg.CLTools_Executables || installCommandLineTools
}

installCommandLineTools() {
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    local savedIFS=$IFS
    IFS=$'\n'
    for packageName in $(softwareupdate -l|grep "\*.*Command Line"|awk -F"*" '{print $2}'|sed -e 's/^ *//')
    do
        softwareupdate -i "$packageName"
    done
    IFS=$savedIFS
}

build() {
    cd "$SCRIPT_ROOT"
    make build
}

execute() {
    local executable
    
    # The function contains exact paths for different Xcode. It is simple and robust.
    # If something is changed in new Xcode we will update this script.
    
    # Xcode 10.1
    executable="./.build/x86_64-apple-macosx10.10/debug/$MIXBOX_CI_BUILD_EXECUTABLE"
    if [ -x "$executable" ]
    then
        "$executable"
        return $?
    fi
    
    # Xcode 10.2.1
    executable="./.build/x86_64-apple-macosx/debug/$MIXBOX_CI_BUILD_EXECUTABLE"
    if [ -x "$executable" ]
    then
        "$executable"
        return $?
    fi
    
    echo "Failed to find executable $MIXBOX_CI_BUILD_EXECUTABLE inside .build directory"
    echo "Note that you may update this script. Here is output of find:"
    find . -name "$MIXBOX_CI_BUILD_EXECUTABLE"
}



main "$@"