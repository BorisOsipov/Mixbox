#!/usr/bin/env python3

import jinja2
import os

# TODO: Maybe it is possible to make 2D matrix of "env" in travis. Docs didn't explain that.
# Also I don't think that making good looking name from "env" is possible.

def generate():
    dict_to_render = {
        "builds": travis_builds()
    }
    yml_string = render(dict_to_render=dict_to_render)
    
    f = open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "..", "..", ".travis.yml"), 'w')
    f.write(yml_string)
    f.close()
    
def render(dict_to_render):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    template_name = "travis_yml"

    loader = jinja2.FileSystemLoader(script_dir)
    jinja_environment = jinja2.Environment(loader=loader)
    template = jinja_environment.get_template(template_name)

    return template.render(dict_to_render)

def travis_builds():
    travis_builds = []
    
    default_ios_destination = Destination(file_name="iphone_7_ios114.json", device="iPhone 7", ios="11.4")
    
    ios_destinations = [
        default_ios_destination,
        Destination(file_name="iphone_x_ios121.json", device="iPhone X", ios="12.1"),
        Destination(file_name="iphone_6_plus_ios93.json", device="iPhone 6", ios="9.3")
    ]
    
    # https://docs.travis-ci.com/user/reference/osx/
    xcode_10_2_image = OsxImage(identifier="xcode10.2", xcode_version="10.2.1", xcode_build="10E1001", macos_version="10.14", jdk_version="12+33")
    xcode_10_1_image = OsxImage(identifier="xcode10.1", xcode_version="10.1", xcode_build="10B61", macos_version="10.13", jdk_version="11.0.1+13")
    xcode_10_0_image = OsxImage(identifier="xcode10", xcode_version="10.0", xcode_build="10A255", macos_version="10.13", jdk_version="10.0.2+13")
    
    default_osx_image = xcode_10_1_image
    
    osx_images = [
        xcode_10_0_image,
        xcode_10_1_image,
        xcode_10_2_image
    ]
    
    builds_with_different_osx = [
        Build(script="ci/builds/demo_tests", name="Demo")
    ]
    
    builds_with_different_ios = [
        Build(script="ci/builds/logic_tests", name="Logic Tests")
    ]
    
    non_ios_builds = [
        Build(script="ci/builds/ipc_demo_tests", name="IPC Demo")
    ]
    
    for build in builds_with_different_ios:
        for destination in ios_destinations:
            osx_image = default_osx_image
            travis_builds.append(
                TravisBuild(
                    name=f'{build.name} / {destination.device} / iOS {destination.ios} / Xcode {osx_image.xcode_version} / macOS {osx_image.macos_version}',
                    destination=destination.file_name,
                    osx_image=osx_image.identifier,
                    script=build.script,
                )
            )
    
    for build in builds_with_different_osx:
        for osx_image in osx_images:
            destination = default_ios_destination
            travis_builds.append(
                TravisBuild(
                    name=f'{build.name} / {destination.device} / iOS {destination.ios} / Xcode {osx_image.xcode_version} / macOS {osx_image.macos_version}',
                    destination=destination.file_name,
                    osx_image=osx_image.identifier,
                    script=build.script,
                )
            )
            
    for build in non_ios_builds:
        # kludge. Mac OS targets don't need iOS destination. The value is ignored.
        destination = default_ios_destination
        osx_image = default_osx_image
        travis_builds.append(
            TravisBuild(
                # Note: format doesn't contain iOS info:
                name=f'{build.name} / Xcode {osx_image.xcode_version} / macOS {osx_image.macos_version}',
                destination=destination.file_name,
                osx_image=osx_image.identifier,
                script=build.script,
            )
        )
    
    return travis_builds

class Build:
    def __init__(self, script, name):
        self.name = name
        self.script = script
    
class TravisBuild:
    def __init__(self, name, destination, osx_image, script):
        self.name = name
        self.destination = destination
        self.osx_image = osx_image
        self.script = script
        
class Destination:
    def __init__(self, file_name, device, ios):
        self.file_name = file_name
        self.device = device
        self.ios = ios

class OsxImage:
    def __init__(self, identifier, xcode_version, xcode_build, macos_version, jdk_version):
        self.identifier = identifier
        self.xcode_version = xcode_version
        self.xcode_build = xcode_build
        self.macos_version = macos_version
        self.jdk_version = jdk_version
        
generate()